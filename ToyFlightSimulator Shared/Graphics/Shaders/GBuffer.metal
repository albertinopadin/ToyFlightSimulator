//
//  GBuffer.metal
//  ToyFlightSimulator
//
//  Created by Albertino Padin on 1/27/23.
//

#include <metal_stdlib>
using namespace metal;

#import "TFSCommon.h"
#import "ShaderDefinitions.h"

// Per-vertex inputs fed by vertex buffer laid out with MTLVertexDescriptor in Metal API
typedef struct {
    float3 position  [[ attribute(TFSVertexAttributePosition) ]];
    float2 tex_coord [[ attribute(TFSVertexAttributeTexcoord) ]];
    half3  normal    [[ attribute(TFSVertexAttributeNormal) ]];
    half3  tangent   [[ attribute(TFSVertexAttributeTangent) ]];
    half3  bitangent [[ attribute(TFSVertexAttributeBitangent) ]];
} DescriptorDefinedVertex;

// Vertex shader outputs and per-fragment inputs.  Includes clip-space position and vertex outputs
// interpolated by rasterizer and fed to each fragment generated by clip-space primitives.
typedef struct {
    float4 position [[ position ]];
    float4 color;
    float2 tex_coord;
    float3 shadow_coord;
    float3 eye_position;
    half3 tangent;
    half3 bitangent;
    half3 normal;
} ColorInOut;

vertex ColorInOut gbuffer_vertex(VertexIn                   in              [[ stage_in ]],
                                 constant SceneConstants    &sceneConstants [[ buffer(TFSBufferIndexSceneConstants) ]],
                                 constant ModelConstants    &modelConstants [[ buffer(TFSBufferModelConstants) ]],
                                 constant LightData         &lightData      [[ buffer(TFSBufferDirectionalLightData) ]]) {
    float4 modelPosition = float4(in.position, 1.0);
    float4 worldPosition = modelConstants.modelMatrix * modelPosition;
    float4 eyePosition = sceneConstants.viewMatrix * worldPosition;
    
    ColorInOut out = {
        .color = in.color,
        .tex_coord = in.textureCoordinate,
        .position = sceneConstants.projectionMatrix * eyePosition,
        .eye_position = eyePosition.xyz,
        .shadow_coord = (lightData.shadowTransformMatrix *
                         lightData.shadowViewProjectionMatrix *
                         worldPosition).xyz,
        .tangent = half3(normalize(modelConstants.normalMatrix * in.tangent)),
        .bitangent = half3(-normalize(modelConstants.normalMatrix * in.bitangent)),
        .normal = half3(normalize(modelConstants.normalMatrix * in.normal)),
    };
    
    return out;
}

fragment GBufferData gbuffer_fragment_base(ColorInOut     in        [[ stage_in ]],
                                           depth2d<float> shadowMap [[ texture(TFSTextureIndexShadow) ]])
{
    half4 base_color = half4(in.color);
    half4 normal = half4(in.normal, 1.0);
    half specularContribution = 1.0;  // Hardcoded for base
    
    // Calculate normal in eye space
    half3 tangent_normal = normalize((normal.xyz * 2.0) - 1.0);

    half3 eye_normal = (tangent_normal.x * in.tangent +
                        tangent_normal.y * in.bitangent +
                        tangent_normal.z * in.normal);
    
    eye_normal = normalize(eye_normal);
    
    constexpr sampler shadowSampler(coord::normalized,
                                    filter::linear,
                                    mip_filter::none,
                                    address::clamp_to_edge,
                                    compare_func::less);
    
    // Compare the depth value in the shadow map to the depth value of the fragment in the sun's.
    // frame of reference.  If the sample is occluded, it will be zero.
    float shadow_sample = shadowMap.sample_compare(shadowSampler, in.shadow_coord.xy, in.shadow_coord.z);
    
    // Store shadow with albedo in unused fourth channel;
    // Store the specular contribution with the normal in unused fourth channel.
    
    // Fill in on-chip geometry buffer data
    GBufferData gBuffer = {
        .albedo_specular = half4(base_color.xyz, specularContribution),
        .normal_shadow = half4(eye_normal.xyz, shadow_sample),
        .depth = in.eye_position.z
    };
    
    return gBuffer;
}

fragment GBufferData gbuffer_fragment_material(ColorInOut               in           [[ stage_in ]],
                                               constant ShaderMaterial &material     [[ buffer(TFSBufferIndexMaterial) ]],
                                               sampler                  sampler2d    [[ sampler(0) ]],
                                               texture2d<half>          baseColorMap [[ texture(TFSTextureIndexBaseColor) ]],
                                               texture2d<half>          normalMap    [[ texture(TFSTextureIndexNormal) ]],
                                               texture2d<half>          specularMap  [[ texture(TFSTextureIndexSpecular) ]],
                                               depth2d<float>           shadowMap    [[ texture(TFSTextureIndexShadow) ]])
{
    half4 base_color_sample;
    half4 normal_sample;
    half specular_contrib;
    
    if (material.useMaterialColor) {
        base_color_sample = half4(material.color);
    } else if (material.useBaseTexture) {
        base_color_sample = baseColorMap.sample(sampler2d, in.tex_coord.xy);
    }
    
    if (material.useNormalMapTexture) {
        normal_sample = normalMap.sample(sampler2d, in.tex_coord.xy);
    } else {
        normal_sample = half4(in.normal, 1.0);
    }
    
    if (material.useSpecularTexture) {
        specular_contrib = specularMap.sample(sampler2d, in.tex_coord.xy).r;
    } else {
        specular_contrib = 1.0;
    }
    
    // Calculate normal in eye space
    half3 tangent_normal = normalize((normal_sample.xyz * 2.0) - 1.0);
    half3 eye_normal = normalize(tangent_normal.x * in.tangent +
                                 tangent_normal.y * in.bitangent +
                                 tangent_normal.z * in.normal);
    
    constexpr sampler shadowSampler(coord::normalized,
                                    filter::linear,
                                    mip_filter::none,
                                    address::clamp_to_edge,
                                    compare_func::less);
    
    // Compare the depth value in the shadow map to the depth value of the fragment in the sun's.
    // frame of reference.  If the sample is occluded, it will be zero.
    float shadow_sample = shadowMap.sample_compare(shadowSampler, in.shadow_coord.xy, in.shadow_coord.z);
    
    // Store shadow with albedo in unused fourth channel;
    // Store the specular contribution with the normal in unused fourth channel.
    
    // Fill in on-chip geometry buffer data
    GBufferData gBuffer = {
        .albedo_specular = half4(base_color_sample.xyz, specular_contrib),
        .normal_shadow = half4(eye_normal.xyz, shadow_sample),
        .depth = in.eye_position.z
    };
    
    return gBuffer;
}
